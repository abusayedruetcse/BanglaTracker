///src
//    /Core
//        /Entities
//            - Book.cs
//            - User.cs
//        /Interfaces
//            - IBookRepository.cs
//            - IUnitOfWork.cs
//        /Exceptions
//            - DomainException.cs
//        /ValueObjects
//            - ISBN.cs
//    /Application
//        /DTOs
//            - BookDto.cs
//        /Interfaces
//            - IBookService.cs
//        /Services
//            - BookService.cs
//        /Exceptions
//            - NotFoundException.cs
//        /Validation
//            - BookValidator.cs
//    /Infrastructure
//        /Data
//            /Repositories
//                - BookRepository.cs
//            - ApplicationDbContext.cs
//            - UnitOfWork.cs
//        /Services
//            - ExternalBookApiService.cs
//    /WebAPI
//        /Controllers
//            - BooksController.cs
//        /Middleware
//            - ExceptionHandlingMiddleware.cs
//        /ViewModels
//            - CreateBookViewModel.cs
//            - UpdateBookViewModel.cs
//        - Startup.cs
//        - Program.cs
///tests
//    /UnitTests
//        - BookServiceTests.cs
//    /IntegrationTests
//        - BookApiTests.cs



//Explanation of the Layers
//Core (Domain Layer)

//Entities: Represents the business objects in your application. These are plain objects with minimal business logic. In the example of a library management system, Book, User, etc., would be your entities.
//Value Objects: Objects that represent a concept in your domain but donâ€™t have identity, like ISBN.
//Interfaces: Contracts for the repositories and services that the application uses. These interfaces ensure that the core layer does not depend on external layers.
//Exceptions: Any domain-specific exceptions like DomainException.
//Application (Use Case Layer)

//DTOs: These are Data Transfer Objects that define how data moves between layers, especially between the API and the core application.
//Interfaces: Contracts for the use cases or services. This includes the IBookService that defines the book-related operations.
//Services: The actual use cases or application services. For example, BookService that interacts with repositories and entities to fulfill use cases like adding a book, updating a book, etc.
//Exceptions: Application-specific exceptions like NotFoundException that represent issues in the application layer.
//Validation: Classes for validating input to ensure that business rules are followed, like BookValidator.
//Infrastructure

//Repositories: Concrete implementations of the repository pattern. This layer interacts with external data sources like databases or APIs. For example, BookRepository would handle CRUD operations for books using something like Entity Framework Core.
//UnitOfWork: Combines multiple repository operations into a single transaction, usually for database interactions.
//External Services: Classes that interact with external APIs or other infrastructure-level services. For instance, ExternalBookApiService could fetch book details from a third-party service.
//WebAPI (Presentation Layer)

//Controllers: These are ASP.NET Core controllers that define the API endpoints and handle HTTP requests. They convert the requests into application-specific calls (through services).
//Middleware: Middleware components, such as an exception-handling middleware, handle cross-cutting concerns.
//ViewModels: Objects that represent how data is presented to and from the API, typically for client interaction (i.e., CreateBookViewModel for posting a new book).
//Tests

//UnitTests: Test individual services or methods, such as BookServiceTests for testing book-related operations.
//IntegrationTests: Test the full integration of components, such as calling the API and checking whether everything from the controller to the database works as expected.
